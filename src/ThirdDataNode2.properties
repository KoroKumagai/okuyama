## ノード定義
##■説明
##・joblist=実行DataNodeの定義と管理クラスの定義。以下の場合はDataNodeは2ノード起動する。
##  KeyManagerJob*が1つのDataNodeと紐付くようになる。下のKeyManagerJob1と定義した場合は下の、
##  「KeyManagerJob1の定義」の部分を参照するようになる。(変更可)
##・helperlist=内部実行定義(変更不可)
joblist=KeyManagerJob1,ServerManagedJob
helperlist=KeyManagerHelper,KeyManagerConnectHelper,KeyManagerAcceptHelper,ServerControllerHelper
#helperlist=KeyManagerHelper


## KeyManagerJob1の定義(DataNodeの定義)
##■説明
##・KeyManagerJob1.JobClass=実行クラス名(変更不可)
##・KeyManagerJob1.Init=DataNode起動Port番号(変更可)
##・KeyManagerJob1.Option=データファイル保存場所(変更可※拡張子が.keyと.work.keyの2つの定義が必ず必要)
##・KeyManagerJob1.Depend=使用していない(変更不可)
KeyManagerJob1.JobClass=okuyama.imdst.job.KeyManagerJob
KeyManagerJob1.Init=8555
KeyManagerJob1.Option=./keymapfile/TH3.key,./keymapfile/TH3.work.key
KeyManagerJob1.Depend=


## ServerManagedJobの定義(管理クラスの定義)(変更不可)
ServerManagedJob.JobClass=okuyama.imdst.job.ServerManagedJob
ServerManagedJob.Init=
ServerManagedJob.Option=true
ServerManagedJob.Depend=



## Helper設定(内部実行クラスの定義)
## ※KeyManagerHelper.Init=ここのみ変更可能。「KeyManagerHelper.Init=memcache」とすると
##   memcacheプロトコルでDataNodeと直接会話できる。MasterNodeと連携は出来ないので単独で使用する場合のみ使用可能
##   memcacheの代わり永続化可能なKVSとして使用できる。
KeyManagerHelper.HelperClass=okuyama.imdst.helper.KeyManagerHelper
KeyManagerHelper.Init=
#KeyManagerHelper.Init=memcache
KeyManagerHelper.Option=

KeyManagerConnectHelper.HelperClass=okuyama.imdst.helper.KeyManagerConnectHelper
KeyManagerConnectHelper.Init=
KeyManagerConnectHelper.Option=

KeyManagerAcceptHelper.HelperClass=okuyama.imdst.helper.KeyManagerAcceptHelper
KeyManagerAcceptHelper.Init=
KeyManagerAcceptHelper.Option=

ServerControllerHelper.HelperClass=okuyama.imdst.helper.ServerControllerHelper
ServerControllerHelper.Init=18555
ServerControllerHelper.Option=
###########################################################################
## 停止ファイル
## 現在は無効なので、killやCtrl+Cなどで強制終了してください
ServerStopFile=./ServerStop


##各DataNodeの永続化設定
##■説明
##  DataNodeのKeyManagerJob1に対する設定
##
##
##・以下の設定をtrueにすると、完全メモリモードとなり、データは永続化されない。falseにしておくと、
##  dataMemoryがtrue、falseに関係なく永続化される。
##  MasterNode.propertiesで「SubKeyMapNodesInfo=」を設定し、SlaveDataNodeを有効にしている場合は、
##  両方のノードが落ちない限り互いにリカバーするので、この設定がtrueでも両ノードが同時に落ちない限り永続化されたような振る舞いになる
##  KeyManagerJob1.memoryMode
##
##・以下の設定をfalseにすると登録valueをファイルに保存するようになり、大量のデータを少ないメモリで管理できる。
##  trueにするとvalueもメモリに登録され、高速にアクセスできる。
##  KeyManagerJob1.dataMemory
##
##・以下の設定をfalseにすると登録keyをファイルに保存する用になり、メモリ上には一切KeyとValueを保存しないようになる
##  そのためメモリ割り当てが小さい値でもディスクの上限までデータが管理できる。
##  trueにするとkeyはメモリに登録され、高速にアクセスできる。
##  ※falseの場合はKeyManagerJob1.keyStoreDirsを必ず指定する
##    (Key値を保存するファイルのディレクトリ※複数指定することで保存先を分散しディスクへの負荷を低減させることが出来る ※カンマ区切り)
##  KeyManagerJob1.keyMemory
##
##・あらかじめ1つのDataNodeに保存するデータ量が予想できるもしくは、この程度保存したらマシンを増やしスケールアウトする場合、
##  この設定に件数を設定すれば予想件数までのレスポンスを向上できる可能性がある。
##  KeyManagerJob1.keySize
##
##・memoryModeとdataMemoryがfalseの場合に、JVMのメモリ使用量がこの値(単位はパーセント)を超えると、自動的に仮想領域を作成し、
##  メモリ枯渇に対応する。メモリの容量を超える使用が考えられる場合は保険的意味合いで、ここの数値を設定するべきである
##  ただし仮想空間はファイルであるため、レスポンスの悪化を引き起こす可能性はある
##  1以上99未満の数値を設定すれば有効となり設定なし、数値負の値を設定すると無効となる。
##  KeyManagerJob1.memoryLimitSize
##
##・仮想空間使用時のファイルストアーディレクトリ
##  複数ディレクトリをまたいで使用する場合(物理的にディスクを複数使用してレスポンス向上を狙う場合など)
##  カンマ区切りで指定する
##  KeyManagerJob1.virtualStoreDirs
##
##・完全ファイルモード時に使用するファイル作成ディレクトリ
##  複数ディレクトリをまたいで使用する場合(物理的にディスクを複数使用してレスポンス向上を狙う場合など)
##  カンマ区切りで指定する
## dataMemoryと、keyMemoryが両方ともtrueの場合のみ有効
##  KeyManagerJob1.keyStoreDirs

##  DataNodeのKeyManagerJob1に対する設定
KeyManagerJob1.memoryMode=false
KeyManagerJob1.dataMemory=true
KeyManagerJob1.keyMemory=true
KeyManagerJob1.keySize=100000
KeyManagerJob1.memoryLimitSize=80
KeyManagerJob1.virtualStoreDirs=./keymapfile/virtualdataTH3/
KeyManagerJob1.keyStoreDirs=./keymapfile/THdata5/,./keymapfile/THdata6/





#### DataNodeの同時接続処理数 ###
## ここで設定された値までクライアントからの依頼を同時に処理する
## メモリやCPU資源に依存するのでこの値まで処理を保障するものではない
##
## KeyNodeMaxConnectParallelExecution=Accept状態になったSocketをシステムで使用可能な状態に加工するスレッド数
##                                       (本値はKeyNodeMaxConnectParallelQueueの1倍以上であること)
## KeyNodeMaxConnectParallelQueue=KeyNodeMaxConnectParallelExecutionで指定したスレッドが監視する並列キュー数
##
## KeyNodeMaxAcceptParallelExecution=Socketが読み込み対象のデータを持っているかを確認するスレッド数
##                                       (本値はKeyNodeMaxAcceptParallelQueueの2倍以上であること)
## KeyNodeMaxAcceptParallelQueue=KeyNodeMaxAcceptParallelExecutionで指定したスレッドが監視する並列キュー数
##
## KeyNodeMaxWorkerParallelExecution=Socketからデータを取得し実際のメイン処理を実行するスレッド数
##                                       (本値はKeyNodeMaxWorkerParallelQueueの2倍以上であること)
## KeyNodeMaxWorkerParallelQueue=KeyNodeMaxWorkerParallelExecutionで指定したスレッドが監視する並列キュー数
KeyNodeMaxConnectParallelExecution=5
KeyNodeMaxConnectParallelQueue=5
KeyNodeMaxAcceptParallelExecution=10
KeyNodeMaxAcceptParallelQueue=5
KeyNodeMaxWorkerParallelExecution=10
KeyNodeMaxWorkerParallelQueue=5
